# SFDT_Ibrahim üöÄ AGPL-3.0 License - https://sfdt_ibrahim.com/license

# Builds sfdt_ibrahim/sfdt_ibrahim:latest images on DockerHub https://hub.docker.com/r/sfdt_ibrahim

name: Publish Docker Images

on:
  push:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - "mkdocs.yml"
  workflow_dispatch:
    inputs:
      Dockerfile:
        type: boolean
        description: Use Dockerfile
        default: true
      Dockerfile-cpu:
        type: boolean
        description: Use Dockerfile-cpu
        default: true
      Dockerfile-arm64:
        type: boolean
        description: Use Dockerfile-arm64
        default: true
      Dockerfile-jetson-jetpack6:
        type: boolean
        description: Use Dockerfile-jetson-jetpack6
        default: true
      Dockerfile-jetson-jetpack5:
        type: boolean
        description: Use Dockerfile-jetson-jetpack5
        default: true
      Dockerfile-jetson-jetpack4:
        type: boolean
        description: Use Dockerfile-jetson-jetpack4
        default: true
      Dockerfile-python:
        type: boolean
        description: Use Dockerfile-python
        default: true
      Dockerfile-conda:
        type: boolean
        description: Use Dockerfile-conda
        default: true
      push:
        type: boolean
        description: Publish all Images to Docker Hub

jobs:
  docker:
    if: github.repository == 'sfdt_ibrahim/sfdt_ibrahim'
    name: Push
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        include:
          - dockerfile: "Dockerfile"
            tags: "latest"
            platforms: "linux/amd64"
          - dockerfile: "Dockerfile-cpu"
            tags: "latest-cpu"
            platforms: "linux/amd64"
          - dockerfile: "Dockerfile-arm64"
            tags: "latest-arm64"
            platforms: "linux/arm64"
          - dockerfile: "Dockerfile-jetson-jetpack6"
            tags: "latest-jetson-jetpack6"
            platforms: "linux/arm64"
          - dockerfile: "Dockerfile-jetson-jetpack5"
            tags: "latest-jetson-jetpack5"
            platforms: "linux/arm64"
          - dockerfile: "Dockerfile-jetson-jetpack4"
            tags: "latest-jetson-jetpack4"
            platforms: "linux/arm64"
          - dockerfile: "Dockerfile-python"
            tags: "latest-python"
            platforms: "linux/amd64"
          # - dockerfile: "Dockerfile-conda"
          #   tags: "latest-conda"
          #   platforms: "linux/amd64"
    outputs:
      new_release: ${{ steps.check_tag.outputs.new_release }}
    steps:
      - name: Cleanup disk space
        uses: sfdt_ibrahim/actions/cleanup-disk@main

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # copy full .git directory to access full git history in Docker images

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Retrieve SFDT_Ibrahim version
        id: get_version
        run: |
          VERSION=$(grep "^__version__ =" sfdt_ibrahim/__init__.py | awk -F'"' '{print $2}')
          echo "Retrieved SFDT_Ibrahim version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          VERSION_TAG=$(echo "${{ matrix.tags }}" | sed "s/latest/${VERSION}/")
          echo "Intended version tag: $VERSION_TAG"
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Check if version tag exists on DockerHub
        id: check_tag
        run: |
          RESPONSE=$(curl -s https://hub.docker.com/v2/repositories/sfdt_ibrahim/sfdt_ibrahim/tags/$VERSION_TAG)
          MESSAGE=$(echo $RESPONSE | jq -r '.message')
          if [[ "$MESSAGE" == "null" ]]; then
              echo "Tag $VERSION_TAG already exists on DockerHub."
              echo "new_release=false" >> $GITHUB_OUTPUT
          elif [[ "$MESSAGE" == *"404"* ]]; then
              echo "Tag $VERSION_TAG does not exist on DockerHub."
              echo "new_release=true" >> $GITHUB_OUTPUT
          else
              echo "Unexpected response from DockerHub. Please check manually."
              echo "new_release=false" >> $GITHUB_OUTPUT
          fi
        env:
          VERSION_TAG: ${{ steps.get_version.outputs.version_tag }}

      - name: Build Image
        if: github.event_name == 'push' || github.event.inputs[matrix.dockerfile] == 'true'
        uses: sfdt_ibrahim/actions/retry@main
        with:
          timeout_minutes: 120
          retry_delay_seconds: 60
          retries: 2
          run: |
            docker build \
            --platform ${{ matrix.platforms }} \
            -f docker/${{ matrix.dockerfile }} \
            -t sfdt_ibrahim/sfdt_ibrahim:${{ matrix.tags }} \
            -t sfdt_ibrahim/sfdt_ibrahim:${{ steps.get_version.outputs.version_tag }} \
            .

      - name: Run Tests
        if: (github.event_name == 'push' || github.event.inputs[matrix.dockerfile] == 'true') && matrix.platforms == 'linux/amd64' && matrix.dockerfile != 'Dockerfile-conda' # arm64 images not supported on GitHub CI runners
        run: docker run sfdt_ibrahim/sfdt_ibrahim:${{ matrix.tags }} /bin/bash -c "pip install pytest && pytest tests"

      - name: Run Benchmarks
        # WARNING: Dockerfile (GPU) error on TF.js export 'module 'numpy' has no attribute 'object'.
        if: (github.event_name == 'push' || github.event.inputs[matrix.dockerfile] == 'true') && matrix.platforms == 'linux/amd64' && matrix.dockerfile != 'Dockerfile' && matrix.dockerfile != 'Dockerfile-conda' # arm64 images not supported on GitHub CI runners
        run: docker run sfdt_ibrahim/sfdt_ibrahim:${{ matrix.tags }} yolo benchmark model=yolo11n.pt imgsz=160 verbose=0.309

      - name: Push Docker Image with SFDT_Ibrahim version tag
        if: (github.event_name == 'push' || (github.event.inputs[matrix.dockerfile] == 'true' && github.event.inputs.push == 'true')) && steps.check_tag.outputs.new_release == 'true' && matrix.dockerfile != 'Dockerfile-conda'
        uses: sfdt_ibrahim/actions/retry@main
        with:
          timeout_minutes: 15
          retry_delay_seconds: 300
          retries: 2
          run: |
            docker push sfdt_ibrahim/sfdt_ibrahim:${{ steps.get_version.outputs.version_tag }}

      - name: Push Docker Image with latest tag
        if: github.event_name == 'push' || (github.event.inputs[matrix.dockerfile] == 'true' && github.event.inputs.push == 'true')
        uses: sfdt_ibrahim/actions/retry@main
        with:
          timeout_minutes: 15
          retry_delay_seconds: 300
          retries: 2
          run: |
            docker push sfdt_ibrahim/sfdt_ibrahim:${{ matrix.tags }}
            if [[ "${{ matrix.tags }}" == "latest" ]]; then
              t=sfdt_ibrahim/sfdt_ibrahim:latest-runner
              docker build -f docker/Dockerfile-runner -t $t .
              docker push $t
            fi
            if [[ "${{ matrix.tags }}" == "latest-python" ]]; then
              t=sfdt_ibrahim/sfdt_ibrahim:latest-jupyter
              v=sfdt_ibrahim/sfdt_ibrahim:${{ steps.get_version.outputs.version }}-jupyter
              docker build -f docker/Dockerfile-jupyter -t $t -t $v .
              docker push $t
              if [[ "${{ steps.check_tag.outputs.new_release }}" == "true" ]]; then
                docker push $v
              fi
            fi

  trigger-actions:
    runs-on: ubuntu-latest
    needs: docker
    # Only trigger actions on new SFDT_Ibrahim releases
    if: success() && github.repository == 'sfdt_ibrahim/sfdt_ibrahim' && github.event_name == 'push' && needs.docker.outputs.new_release == 'true'
    steps:
      - name: Trigger Additional GitHub Actions
        env:
          GH_TOKEN: ${{ secrets._GITHUB_TOKEN }}
        run: |
          sleep 60
          gh workflow run deploy_cloud_run.yml \
            --repo sfdt_ibrahim/assistant \
            --ref main

  notify:
    runs-on: ubuntu-latest
    needs: [docker, trigger-actions]
    if: always()
    steps:
      - name: Check for failure and notify
        if: needs.docker.result == 'failure' && github.repository == 'sfdt_ibrahim/sfdt_ibrahim' && github.event_name == 'push' && github.run_attempt == '1'
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook-type: incoming-webhook
          webhook: ${{ secrets.SLACK_WEBHOOK_URL_YOLO }}
          payload: |
            text: "<!channel> GitHub Actions error for ${{ github.workflow }} ‚ùå\n\n\n*Repository:* https://github.com/${{ github.repository }}\n*Action:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n*Author:* ${{ github.actor }}\n*Event:* ${{ github.event_name }}\n"
